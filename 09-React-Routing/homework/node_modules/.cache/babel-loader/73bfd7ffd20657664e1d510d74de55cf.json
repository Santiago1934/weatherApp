{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santi\\\\Desktop\\\\Henry\\\\FT-M2\\\\FT-M2\\\\09-React-Routing\\\\homework\\\\src\\\\containers\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Ciudad from \"../components/Ciudad.jsx\";\nimport About from \"../components/About.jsx\";\nimport { Route } from \"react-router-dom\";\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport { ToastContainer, toast } from \"react-toastify\";\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n\n        if (!cities.find(el => el.name === ciudad.name)) {\n          setCities(oldCities => [...oldCities, ciudad]);\n          toast.success(\"Ciudad encontrada con exito\");\n        } else if (cities.find(el => el.name === ciudad.name)) {} else {\n          alert(\"Ciudad no encontrada\");\n        }\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"No hay ciudades para mostrar\");\n    }\n  }\n\n  const Rutas = React.createElement(React.Fragment, null, React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    component: About,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/ciudad/:ciudadId\",\n    render: ({\n      match\n    }) => React.createElement(Ciudad, {\n      city: onFilter(match.params.ciudadId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(ToastContainer, {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: true,\n    newestOnTop: true,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnHover: true,\n    pauseOnFocusLoss: true,\n    draggable: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Nav, {\n    onSearch: onSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), Rutas, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Cards, {\n    cities: cities,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/santi/Desktop/Henry/FT-M2/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Ciudad","About","Route","Nav","Cards","ToastContainer","toast","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","find","el","success","alert","onFilter","ciudadId","parseInt","length","Rutas","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Ciudad from \"../components/Ciudad.jsx\";\r\nimport About from \"../components/About.jsx\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Nav from '../components/Nav.jsx';\r\nimport Cards from '../components/Cards.jsx';\r\nimport { ToastContainer, toast }  from \"react-toastify\"\r\n\r\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\r\n\r\n\r\nfunction App() {\r\n  const [cities, setCities] = useState([]);\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id != id));\r\n  }\r\n  function onSearch(ciudad) {\r\n    //Llamado a la API del clima\r\n   \r\n     \r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          if(!cities.find(el => el.name === ciudad.name)){\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n          toast.success(\"Ciudad encontrada con exito\")\r\n\r\n        } else if (cities.find(el => el.name === ciudad.name)){\r\n            } else {\r\n            alert(\"Ciudad no encontrada\");\r\n          }\r\n        }\r\n      });\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter((c) => c.id == parseInt(ciudadId));\r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return(\r\n          <p>No hay ciudades para mostrar</p>\r\n        );\r\n    }\r\n  }\r\n\r\n  const Rutas=(\r\n    <>\r\n    <Route exact path =\"/about\" component={About}></Route>\r\n    <Route exact path='/ciudad/:ciudadId' render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\r\n  />\r\n    </>\r\n  )\r\n    \r\n    \r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnHover\r\n        pauseOnFocusLoss\r\n        draggable\r\n      />\r\n      <Nav onSearch={onSearch}/>\r\n        {Rutas}\r\n      <div>\r\n        <Route exact path =\"/\"><Cards\r\n          cities={cities}\r\n          onClose={onClose}\r\n        /></Route>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}