{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santi\\\\Desktop\\\\Henry\\\\FT-M2\\\\FT-M2\\\\09-React-Routing\\\\homework\\\\src\\\\containers\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Ciudad from \"../components/Ciudad.jsx\";\nimport About from \"../components/About.jsx\";\nimport { Route } from \"react-router-dom\";\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport estrellas from \"../components/img/fondoEstrellado.jpg\";\nimport { toast } from \"react-toastify\";\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [darkMode, setDarkmode] = useState(false);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n    toast.success('Ciudad eliminada con exito');\n  }\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n\n        if (!cities.find(el => el.name === ciudad.name)) {\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          toast.error(\"Ya agregaste este lugar\");\n        }\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"No hay ciudades para mostrar\");\n    }\n  }\n\n  var estrellita = \"black\";\n  const Rutas = React.createElement(React.Fragment, null, React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    component: About,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/ciudad/:ciudadId\",\n    render: ({\n      match\n    }) => React.createElement(Ciudad, {\n      city: onFilter(match.params.ciudadId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"App\"\n    /* style={ darkMode ? {backgroundImage:`url(${estrellas})`,\r\n                          \r\n                         \r\n               } : {backgroundColor:\"white\"}} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    onSearch: onSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), Rutas, React.createElement(\"button\", {\n    onClick: () => setDarkmode(!darkMode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Dark Mode\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: estrellas,\n    width: \"60%\",\n    height: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Cards, {\n    cities: cities,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"footer\", {\n    className: \"footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Santiago Rosales 2020\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/santi/Desktop/Henry/FT-M2/FT-M2/09-React-Routing/homework/src/containers/App.js"],"names":["React","useState","Ciudad","About","Route","Nav","Cards","estrellas","toast","apiKey","App","cities","setCities","darkMode","setDarkmode","onClose","id","oldCities","filter","c","success","onSearch","ciudad","fetch","then","r","json","recurso","main","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","find","el","error","onFilter","ciudadId","parseInt","length","estrellita","Rutas","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Ciudad from \"../components/Ciudad.jsx\";\r\nimport About from \"../components/About.jsx\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Nav from '../components/Nav.jsx';\r\nimport Cards from '../components/Cards.jsx';\r\nimport estrellas from \"../components/img/fondoEstrellado.jpg\"\r\nimport { toast } from \"react-toastify\"\r\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\r\n\r\n\r\nfunction App() {\r\n  const [cities, setCities] = useState([]);\r\n\r\n  const [ darkMode, setDarkmode] = useState(false)\r\n\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id != id));\r\n    toast.success('Ciudad eliminada con exito');\r\n  }\r\n\r\n\r\n  function onSearch(ciudad) {\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\r\n      .then(r =>  r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main) {\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          if (!cities.find(el => el.name === ciudad.name)) {\r\n            setCities(oldCities => [...oldCities, ciudad]);\r\n          } else {\r\n            toast.error(\"Ya agregaste este lugar\");\r\n          }\r\n        }\r\n      })\r\n\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter((c) => c.id == parseInt(ciudadId));\r\n    if (ciudad.length > 0) {\r\n        return ciudad[0];\r\n    \r\n      } else {\r\n          return (\r\n             <p>No hay ciudades para mostrar</p>\r\n          );\r\n    }\r\n  }\r\n\r\n  var estrellita = \"black\"\r\n  const Rutas = (\r\n    <>\r\n      <Route exact path=\"/about\" component={About}></Route>\r\n      <Route exact path='/ciudad/:ciudadId' render={({ match }) => <Ciudad city={onFilter(match.params.ciudadId)} />}\r\n      />\r\n    </>\r\n  )\r\n\r\n\r\n  return (\r\n    <div className=\"App\" /* style={ darkMode ? {backgroundImage:`url(${estrellas})`,\r\n                                               \r\n                                              \r\n                                    } : {backgroundColor:\"white\"}} */>\r\n\r\n      <Nav onSearch={onSearch} />\r\n      {Rutas}\r\n      <button onClick={()=> setDarkmode(!darkMode)}>Dark Mode</button>\r\n      <div>\r\n        <img src={estrellas} width=\"60%\" height=\"auto\"/>\r\n        <Route exact path=\"/\"><Cards\r\n          cities={cities}\r\n          onClose={onClose}\r\n        /></Route>\r\n\r\n      </div>\r\n      <hr />\r\n      <footer className=\"footer\">\r\n        <p>Santiago Rosales 2020</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}